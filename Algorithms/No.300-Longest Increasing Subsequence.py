"""
No.300：最长递增子序列
难度：中等

问题描述：

    给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。
    子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。
    例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。

示例 1：

    输入：nums = [10,9,2,5,3,7,101,18]

    输出：4

    解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。

示例 2：

    输入：nums = [0,1,0,3,2,3]

    输出：4

示例 3：

    输入：nums = [7,7,7,7,7,7,7]

    输出：1
 
提示：

    1 <= nums.length <= 2500
    -10^4 <= nums[i] <= 10^4
 
进阶：

    你可以设计时间复杂度为 O(n^2) 的解决方案吗？
    你能将算法的时间复杂度降低到 O(n log(n)) 吗?

解题思路：

    考虑一个简单的贪心算法，如果我们要使上升子序列尽可能的长，则我们需要让序列上升得尽可能慢，
    因此我们希望每次在上升子序列最后加上的那个数尽可能的小。
    基于上面的贪心思路，我们维护一个数组 d[i] ，表示长度为 i 的最长上升子序列的末尾元素的最小值，
    用 len 记录目前最长上升子序列的长度，起始时 len 为 1，d[1] = nums[0]。
    同时我们可以注意到 d[i] 是关于 i 单调递增的。因为如果 d[j]≥d[i] 且 j<i，
    我们考虑从长度为 i 的最长上升子序列的末尾删除 i−j 个元素，那么这个序列长度变为 j ，
    且第 j 个元素 x（末尾元素）必然小于 d[i]，也就小于 d[j]
    那么我们就找到了一个长度为 j 的最长上升子序列，并且末尾元素比 d[j] 小，从而产生了矛盾。因此数组 d 的单调性得证。
    我们依次遍历数组 nums 中的每个元素，并更新数组 d 和 len 的值。如果 nums[i]>d[len] 则更新 len=len+1，
    否则在 d[1…len]中找满足 d[i−1]<nums[j]<d[i] 的下标 i，并更新 d[i]=nums[j]。
    根据 d 数组的单调性，我们可以使用二分查找寻找下标 i，优化时间复杂度

    最后整个算法流程为：
        设当前已求出的最长上升子序列的长度为 len（初始时为 1），
        从前往后遍历数组 nums，在遍历到 nums[i] 时：
        如果 nums[i]>d[len] ，则直接加入到 d 数组末尾，并更新 len=len+1；
        否则，在 d 数组中二分查找，找到第一个比 nums[i] 小的数 d[k] ，
        并更新d[k+1]=nums[i]。

    以输入序列 [0, 8, 4, 12, 2]为例：
    第一步插入 0，d = [0]；
    第二步插入 8，d = [0, 8]；
    第三步插入 4，d = [0, 4]；
    第四步插入 12，d = [0, 4, 12]；
    第五步插入 2，d = [0, 2, 12]。
    最终得到最大递增子序列长度为 3。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-increasing-subsequence

"""


def lengthOfLIS(nums):
    """
    :type nums: List[int]
    :rtype: int
    """
    d = []
    for n in nums:
        if not d or n > d[-1]:
            d.append(n)
        else:
            l, r = 0, len(d) - 1
            loc = r
            while l <= r:
                mid = (l + r) // 2
                if d[mid] >= n:
                    loc = mid
                    r = mid - 1
                else:
                    l = mid + 1
            d[loc] = n
    return len(d)


if __name__ == '__main__':
    nums = [10, 9, 2, 5, 3, 7, 101, 18]
    result = lengthOfLIS(nums)
    print(result)
